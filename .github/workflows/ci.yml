name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -coverprofile=coverage.out ./pkg/... ./internal/...

    - name: Build examples (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p bin
        go build -o bin/simple_demo examples/hawktui/simple_demo.go
        go build -o bin/dashboard_demo examples/hawktui/dashboard_demo.go
        go build -o bin/form_demo examples/hawktui/form_demo.go
        go build -o bin/list_demo examples/hawktui/list_demo.go

    - name: Build examples (Windows)
      if: runner.os == 'Windows'
      run: |
        New-Item -ItemType Directory -Force -Path bin | Out-Null
        go build -o bin/simple_demo.exe examples/hawktui/simple_demo.go
        go build -o bin/dashboard_demo.exe examples/hawktui/dashboard_demo.go
        go build -o bin/form_demo.exe examples/hawktui/form_demo.go
        go build -o bin/list_demo.exe examples/hawktui/list_demo.go

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.out
        flags: unittests

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m ./pkg/... ./internal/... ./cmd/...

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: hawktui:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, lint, docker]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' }}
      run: |
        echo "✅ All checks passed for commit ${{ github.sha }}"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' }}
      run: |
        echo "❌ Some checks failed for commit ${{ github.sha }}"
        exit 1
